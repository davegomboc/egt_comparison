#if !defined(EGT_COMPARISON_EXAMPLE_ENDGAME_TABLE_K_VS_K_HPP)
#define EGT_COMPARISON_EXAMPLE_ENDGAME_TABLE_K_VS_K_HPP


#include <cstdint>
#include <vector>


std::vector<std::uint64_t> const K_vs_k_chesspresso_plb{
    29, // per cube bit count
    // Here, 29 means:
    // 1 bit pair for the side to move (bits 0 and 1)
    // 6 bit pairs for the white king position (bits 2 through 13)
    // 6 bit pairs for the black king position (bits 14 through 25)
    // 3 bits for the win, draw, loss outputs (bits 26, 27, and 28)
    // 29 = (2 * (1 + 6 + 6) + 3)

    246, // F cube count

    0, // R cube count
    // In the files you get, this will not be zero, but don't worry about that.

    0, // D cube count
    // In the files you get, this might not be zero, but don't worry about that.

    // 246 F cubes
    UINT64_C(0x0000000009559955),
    UINT64_C(0x000000000955a555),
    UINT64_C(0x0000000009565955),
    UINT64_C(0x0000000009566555),
    UINT64_C(0x000000000959a555),
    UINT64_C(0x00000000095a5955),
    UINT64_C(0x00000000095a6555),
    UINT64_C(0x00000000095a6955),
    UINT64_C(0x0000000009655555),
    UINT64_C(0x0000000009655955),
    UINT64_C(0x0000000009656555),
    UINT64_C(0x0000000009659555),
    UINT64_C(0x0000000009659955),
    UINT64_C(0x0000000009659965),
    UINT64_C(0x0000000009659995),
    UINT64_C(0x000000000965a555),
    UINT64_C(0x000000000965a595),
    UINT64_C(0x000000000965a955),
    UINT64_C(0x000000000965a965),
    UINT64_C(0x000000000965a995),
    UINT64_C(0x0000000009665555),
    UINT64_C(0x0000000009665955),
    UINT64_C(0x0000000009665965),
    UINT64_C(0x0000000009665995),
    UINT64_C(0x0000000009666555),
    UINT64_C(0x0000000009666595),
    UINT64_C(0x0000000009666955),
    UINT64_C(0x0000000009669955),
    UINT64_C(0x0000000009669995),
    UINT64_C(0x000000000966a555),
    UINT64_C(0x000000000966a955),
    UINT64_C(0x000000000966a995),
    UINT64_C(0x0000000009695555),
    UINT64_C(0x0000000009695955),
    UINT64_C(0x0000000009695995),
    UINT64_C(0x0000000009696555),
    UINT64_C(0x0000000009696595),
    UINT64_C(0x0000000009699955),
    UINT64_C(0x0000000009699995),
    UINT64_C(0x000000000969a555),
    UINT64_C(0x000000000969a955),
    UINT64_C(0x000000000969a965),
    UINT64_C(0x000000000969a995),
    UINT64_C(0x00000000096a5555),
    UINT64_C(0x00000000096a5955),
    UINT64_C(0x00000000096a5965),
    UINT64_C(0x00000000096a5995),
    UINT64_C(0x00000000096a6555),
    UINT64_C(0x00000000096a6595),
    UINT64_C(0x00000000096a6955),
    UINT64_C(0x00000000096a6995),
    UINT64_C(0x00000000096a9955),
    UINT64_C(0x00000000096aa555),
    UINT64_C(0x00000000096aa955),
    UINT64_C(0x0000000009955555),
    UINT64_C(0x0000000009959955),
    UINT64_C(0x0000000009959995),
    UINT64_C(0x000000000995a555),
    UINT64_C(0x000000000995a955),
    UINT64_C(0x000000000995a995),
    UINT64_C(0x0000000009965555),
    UINT64_C(0x0000000009965955),
    UINT64_C(0x0000000009966555),
    UINT64_C(0x0000000009966955),
    UINT64_C(0x0000000009969955),
    UINT64_C(0x0000000009969995),
    UINT64_C(0x000000000996a555),
    UINT64_C(0x000000000996a955),
    UINT64_C(0x0000000009995555),
    UINT64_C(0x0000000009999955),
    UINT64_C(0x0000000009999995),
    UINT64_C(0x000000000999a555),
    UINT64_C(0x000000000999a955),
    UINT64_C(0x000000000999a995),
    UINT64_C(0x00000000099a5955),
    UINT64_C(0x00000000099a5995),
    UINT64_C(0x00000000099a6555),
    UINT64_C(0x00000000099a6955),
    UINT64_C(0x00000000099a6995),
    UINT64_C(0x00000000099a9955),
    UINT64_C(0x00000000099aa555),
    UINT64_C(0x0000000009a55555),
    UINT64_C(0x0000000009a56555),
    UINT64_C(0x0000000009a59555),
    UINT64_C(0x0000000009a59955),
    UINT64_C(0x0000000009a59995),
    UINT64_C(0x0000000009a5a555),
    UINT64_C(0x0000000009a5a595),
    UINT64_C(0x0000000009a5a955),
    UINT64_C(0x0000000009a5a995),
    UINT64_C(0x0000000009a65555),
    UINT64_C(0x0000000009a65955),
    UINT64_C(0x0000000009a65995),
    UINT64_C(0x0000000009a66555),
    UINT64_C(0x0000000009a66595),
    UINT64_C(0x0000000009a66955),
    UINT64_C(0x0000000009a69555),
    UINT64_C(0x0000000009a69955),
    UINT64_C(0x0000000009a6a555),
    UINT64_C(0x0000000009a6a595),
    UINT64_C(0x0000000009a6a955),
    UINT64_C(0x0000000009a95555),
    UINT64_C(0x0000000009a95955),
    UINT64_C(0x0000000009a96555),
    UINT64_C(0x0000000009a96595),
    UINT64_C(0x0000000009a96955),
    UINT64_C(0x0000000009a99555),
    UINT64_C(0x0000000009a99955),
    UINT64_C(0x0000000009a99995),
    UINT64_C(0x0000000009a9a555),
    UINT64_C(0x0000000009a9a595),
    UINT64_C(0x0000000009a9a955),
    UINT64_C(0x0000000009aa5555),
    UINT64_C(0x0000000009aa5955),
    UINT64_C(0x0000000009aa5995),
    UINT64_C(0x0000000009aa6555),
    UINT64_C(0x0000000009aa6595),
    UINT64_C(0x0000000009aa6955),
    UINT64_C(0x0000000009aa6995),
    UINT64_C(0x0000000009aaa555),
    UINT64_C(0x000000000a559955),
    UINT64_C(0x000000000a559995),
    UINT64_C(0x000000000a55a555),
    UINT64_C(0x000000000a55a955),
    UINT64_C(0x000000000a565955),
    UINT64_C(0x000000000a566555),
    UINT64_C(0x000000000a566955),
    UINT64_C(0x000000000a569955),
    UINT64_C(0x000000000a56a555),
    UINT64_C(0x000000000a56a955),
    UINT64_C(0x000000000a596955),
    UINT64_C(0x000000000a599955),
    UINT64_C(0x000000000a59a555),
    UINT64_C(0x000000000a59a955),
    UINT64_C(0x000000000a5a5955),
    UINT64_C(0x000000000a5a5995),
    UINT64_C(0x000000000a5a6555),
    UINT64_C(0x000000000a5a6955),
    UINT64_C(0x000000000a5a6995),
    UINT64_C(0x000000000a5aa555),
    UINT64_C(0x000000000a655555),
    UINT64_C(0x000000000a655955),
    UINT64_C(0x000000000a656555),
    UINT64_C(0x000000000a659555),
    UINT64_C(0x000000000a659955),
    UINT64_C(0x000000000a659965),
    UINT64_C(0x000000000a659995),
    UINT64_C(0x000000000a65a555),
    UINT64_C(0x000000000a65a595),
    UINT64_C(0x000000000a65a955),
    UINT64_C(0x000000000a65a965),
    UINT64_C(0x000000000a65a995),
    UINT64_C(0x000000000a665555),
    UINT64_C(0x000000000a665955),
    UINT64_C(0x000000000a665965),
    UINT64_C(0x000000000a665995),
    UINT64_C(0x000000000a666555),
    UINT64_C(0x000000000a666595),
    UINT64_C(0x000000000a666955),
    UINT64_C(0x000000000a666995),
    UINT64_C(0x000000000a669955),
    UINT64_C(0x000000000a669995),
    UINT64_C(0x000000000a66a555),
    UINT64_C(0x000000000a66a955),
    UINT64_C(0x000000000a695555),
    UINT64_C(0x000000000a695955),
    UINT64_C(0x000000000a695995),
    UINT64_C(0x000000000a696555),
    UINT64_C(0x000000000a696595),
    UINT64_C(0x000000000a696955),
    UINT64_C(0x000000000a699555),
    UINT64_C(0x000000000a699955),
    UINT64_C(0x000000000a699965),
    UINT64_C(0x000000000a699995),
    UINT64_C(0x000000000a69a555),
    UINT64_C(0x000000000a69a595),
    UINT64_C(0x000000000a69a955),
    UINT64_C(0x000000000a69a995),
    UINT64_C(0x000000000a6a5555),
    UINT64_C(0x000000000a6a5955),
    UINT64_C(0x000000000a6a5965),
    UINT64_C(0x000000000a6a5995),
    UINT64_C(0x000000000a6a6555),
    UINT64_C(0x000000000a6a6595),
    UINT64_C(0x000000000a6a6955),
    UINT64_C(0x000000000a6a6965),
    UINT64_C(0x000000000a6a6995),
    UINT64_C(0x000000000a6a9955),
    UINT64_C(0x000000000a6aa555),
    UINT64_C(0x000000000a955555),
    UINT64_C(0x000000000a956555),
    UINT64_C(0x000000000a959955),
    UINT64_C(0x000000000a959995),
    UINT64_C(0x000000000a95a555),
    UINT64_C(0x000000000a95a955),
    UINT64_C(0x000000000a95a965),
    UINT64_C(0x000000000a95a995),
    UINT64_C(0x000000000a965555),
    UINT64_C(0x000000000a965955),
    UINT64_C(0x000000000a966555),
    UINT64_C(0x000000000a966595),
    UINT64_C(0x000000000a966955),
    UINT64_C(0x000000000a969955),
    UINT64_C(0x000000000a969995),
    UINT64_C(0x000000000a96a555),
    UINT64_C(0x000000000a96a955),
    UINT64_C(0x000000000a96a995),
    UINT64_C(0x000000000a995555),
    UINT64_C(0x000000000a996555),
    UINT64_C(0x000000000a996595),
    UINT64_C(0x000000000a999955),
    UINT64_C(0x000000000a999995),
    UINT64_C(0x000000000a99a555),
    UINT64_C(0x000000000a99a955),
    UINT64_C(0x000000000a99a965),
    UINT64_C(0x000000000a99a995),
    UINT64_C(0x000000000a9a5555),
    UINT64_C(0x000000000a9a5955),
    UINT64_C(0x000000000a9a5995),
    UINT64_C(0x000000000a9a6555),
    UINT64_C(0x000000000a9a6595),
    UINT64_C(0x000000000a9a6955),
    UINT64_C(0x000000000a9a6995),
    UINT64_C(0x000000000a9a9955),
    UINT64_C(0x000000000a9aa555),
    UINT64_C(0x000000000a9aa955),
    UINT64_C(0x000000000aa55555),
    UINT64_C(0x000000000aa59555),
    UINT64_C(0x000000000aa59955),
    UINT64_C(0x000000000aa5a555),
    UINT64_C(0x000000000aa5a955),
    UINT64_C(0x000000000aa65555),
    UINT64_C(0x000000000aa65955),
    UINT64_C(0x000000000aa66555),
    UINT64_C(0x000000000aa69555),
    UINT64_C(0x000000000aa6a555),
    UINT64_C(0x000000000aa95555),
    UINT64_C(0x000000000aa96555),
    UINT64_C(0x000000000aa99555),
    UINT64_C(0x000000000aa99955),
    UINT64_C(0x000000000aa9a555),
    UINT64_C(0x000000000aaa5555),
    UINT64_C(0x000000000aaa5955),
    UINT64_C(0x000000000aaa6555),
    UINT64_C(0x000000000aaa6955),
    UINT64_C(0x000000000aaa9555),
    // If either "R cube count" or "D cube count" are non-zero, then there will
    // be more std::uint64_t values to cover any OFF-cover or DC-cover that is
    // present in the file.  However, you only want the ON-cover (which contains
    // "F cube count" rows, which you know the value of from above), so you can
    // stop reading the file here.
};


#endif // EGT_COMPARISON_EXAMPLE_ENDGAME_TABLE_K_VS_K_HPP
